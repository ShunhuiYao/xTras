Notebook[{
Cell[BoxData[
 RowBox[{"Quiet", "@", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "Print", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"<<", "xAct`xTras`"}]}], "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Names", "[", "\"\<xAct`xTras`*\>\"", "]"}], ",", 
    RowBox[{
     RowBox[{"StringFreeQ", "[", 
      RowBox[{"#", ",", "\"\<$\>\""}], "]"}], "&"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"StringReplace", "[", 
   RowBox[{
    RowBox[{"StringReplace", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"\"\<||\>\"", ",", "#", ",", " ", "\"\< || \>\"", ",", " ", 
          RowBox[{"MessageName", "[", 
           RowBox[{
            RowBox[{"Evaluate", "@", 
             RowBox[{"Symbol", "@", "#"}]}], ",", "\"\<usage\>\""}], "]"}], 
          ",", " ", "\"\<||\>\""}], "]"}], "&"}], "/@", "%"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<[\>\"", "\[Rule]", "\"\<`[\>\""}], ",", 
        RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<]`\>\""}], ",", 
        RowBox[{"\"\<\\n\>\"", "\[Rule]", "\"\< \>\""}], ",", 
        RowBox[{"\"\<\\t\>\"", "\[Rule]", "\"\<\>\""}], ",", 
        RowBox[{"\"\<*\>\"", "\[Rule]", "\"\<`*`\>\""}]}], "}"}]}], "]"}], 
    ",", 
    RowBox[{"\"\<  \>\"", "\[Rule]", "\"\< \>\""}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"StringJoin", "[", 
  RowBox[{"Riffle", "[", 
   RowBox[{"%", ",", "\"\<\\n\>\""}], "]"}], "]"}]}], "Input"],

Cell[BoxData["\<\"||AllContractions || \
AllContractions`[metric,indices]``[expr]` gives all possible contractions of \
expr (which can also be a list of expressions with the same free indices) \
with metrics with the given indices. Both metric and indices are optional. If \
indices is omitted, all free indices are contracted. When the number of free \
indices if odd, one extra index is contracted over, such that one free index \
ends up in all possible positions. If metric is omitted, the first metric of \
the manifold of the tensors of the expression is used. Vanishing contractions \
(if any) are removed from the final result.||\\n||BackgroundSolution || \
BackgroundSolution is an option for ToBackground. It should be (a list of) \
replacement rule(s).||\\n||ClearAutomaticRules || \
ClearAutomaticRules`[symbol,rules]` tries to remove rules from the upvalues \
and downvalues of symbol.||\\n||ClearCurvatureRelations || \
ClearCurvatureRelations`[CD]` removes the automatic curvature relations for \
the covariant derivative CD.||\\n||Coefficients || Option for \
InvarInvariants.||\\n||CollectMethod || CollectMethod is an option for \
TensorCollect.||\\n||ComputeBasisValues || \
ComputeBasisValues`[chart1,chart2]` computes and stores the values of the \
basis elements relating chart1 to chart2 and vice versa. Thus it computes \
Basis`[-chart1,chart2]` and Basis`[-chart2,chart1]`.  Note that \
ComputeBasisValues internally uses InChart, so it is preferable to define the \
transformations of the coordinates from chart1 to chart2 and vice versa with \
InChart before using ComputeBasisValues.||\\n||ConstantExprQ || \
ConstantExprQ`[expr]` returns True if expr only contains contains constants \
(i.e. constant symbols and integers, fractions, etc), and False \
otherwise.||\\n||CurvatureRelationsQ || CurvatureRelationsQ`[CD]` returns \
True if all of the curvature relations for the covariant derivative CD have \
been set as automatic rules, and False otherwise.||\\n||DefMetricVariation || \
DefMetricVariation`[metric, pert, param]` first defines a metric perturbation \
with the same arguments, and then defines covariant VarD and VarL functions \
for the metric.||\\n||DefVariation || DefVariation is an option for \
DefMetric. If True, DefMetric automatically defines a covariant metric \
variation.||\\n||DerivativeOrder || DerivativeOrder`[expr,CD]` gives the \
order of derivatives of expr.||\\n||Description || Option for \
MapTimed.||\\n||DivFreeQ || DivFreeQ`[expr,tensor,CD]` returns True if expr \
does not contain a divergence of the given tensor w.r.t. the given CD after \
arbritrary commutations of the covariant derivatives.||\\n||DoTensorCollect \
|| DoTensorCollect`[func]``[expr]` maps func on every collected tensor in \
expr. This is useful if you have an expression with one tensor object with \
lots of different constants.||\\n||EinsteinCC || EinsteinCC is a reserved \
word in xTras. It is used to generate the name of the cosmological Einstein \
curvature tensor associated to a connection acting on a tangent \
bundle.||\\n||EinsteinCCToRicci || EinsteinCCToRicci`[expr,cd]` converts \
cosmological Einstein tensors to Ricci tensors.||\\n||EinsteinSpaceRules || \
EinsteinSpaceRules`[CD,K]` produces replacement rules for the curvature \
tensors of CD (except the Riemann and Weyl) on an Einstein space of curvature \
K.||\\n||EulerDensity || EulerDensity`[CD]` give the Euler density of the \
curvature tensor of the covariant derivative CD. If the manifold has generic \
dimension, you can use EulerDensity`[CD,dim]` to specify a \
dimension.||\\n||ExpandBackground || ExpandBackground`[expr,n]` expands only \
the nth order perbutation of expr on an arbitrary background, without an \
expansion parameter or 1/n! factor. The background is set with the option \
BackgroundSolution.||\\n||ExpandFlat || ExpandFlat`[expr,n]` expands only the \
nth order perbutation of expr on a flat background, without an expansion \
parameter or 1/n! factor.||\\n||ExpandPerturbationDer || \
ExpandPerturbationDer expands the perturbations of derivatives. It's similar \
to the private xAct function ExpandPerturbationDer, but not \
quite.||\\n||ExtraRules || ExtraRules is an option for \
ApplyBackground.||\\n||FlatRules || FlatRules`[expr]` produces produces \
replacement rules for the curvature tensors of CD on a symmetric space of \
zero curvature. Additionally, partial derivatives of metric are also \
zero.||\\n||FS || FullSimplification`[metric]``[expr]` tries to simplify expr \
as much as possible, taking Bianchi identities into account and sorting \
covariant derivatives. It also uses to power of the Invar package to simplify \
scalar invariants of Riccis and Riemanns (but not of other curvature tensors \
like the Weyl tensor).||\\n||FullSimplification || \
FullSimplification`[metric]``[expr]` tries to simplify expr as much as \
possible, taking Bianchi identities into account and sorting covariant \
derivatives. It also uses to power of the Invar package to simplify scalar \
invariants of Riccis and Riemanns (but not of other curvature tensors like \
the Weyl tensor).||\\n||ImplodedTensorValues || ImplodedTensorValues`[CD, T, \
basis]` computes the values of the covariant derivative CD of the tensor T in \
the given basis, and stores the values in the imploded tensor CDT. Both CD \
and T do not take indices.||\\n||IncludeDuals || Option for SingleInvariants, \
ProductInvariants, RangeInvariants, and InvarLagrangian whether to include \
dual invariants or not.||\\n||InvarLagrangian || InvarLagrangian`[metric, \
maxorder]` gives the most general Lagrangian up to maxorder in derivatives of \
the metric, consisting solely of curvature tensors.||\\n||InvarWrapper || \
InvarWrapper`[invarFunction,g]``[expr,otherargs]` wraps an Invar function \
specified by invarFunction s.t. you can use your own options for ToCanonical, \
ContractMetric, and CurvatureRelations.||\\n||KillingVectorOf || Option for \
DefTensor. If the tensor is to be a Killing vector, the option should be a \
metric. (i.e. KillingVectorOf -> metric)||\\n||KillingVectorQ || \
KillingVectorQ`[tensor]` return True if the tensor is defined to be a Killing \
vector||\\n||LevelSpecQ || LevelSpecQ`[levelspec]` yields True if levelspec \
is a standard levelspec, and false otherwise.||\\n||MakeEquationRule || \
MakeEquationRule`[{equation,pattern,cond}]` returns rules for tensors \
matching pattern in the given equation. Note that is extremely similar to \
IndexSolve.||\\n||MapTimed || MapTimed`[func,expr]` is similar to Map, except \
that it also prints the expected calculation time.||\\n||MetricPermutations \
|| MetricPermutations`[metric,indices]` gives a list of all possible \
permutations of indices distributed over n/2 metrics (n being the number of \
indices). Thus MetricPermutations`[g]``[{a,b,c,d}]` gives {g`[a,b]`g`[c,d]`, \
g`[a,c]`g`[b,d]`, g`[a,d]`g`[b,c]`}.  Naively this gives n! combinations, but \
because the metric is symmetric and the ordering of the product is \
irrelevant, the number of permutations reduces to (n-1)!!, which is roughly \
the square root of n!. MetricPermutations takes this simplification into \
account.||\\n||MonitorSteps || Option for MapTimed.||\\n||OrderCoefficient || \
OrderCoefficient`[order,n]` gives a constant symbol for \
InvarLagrangian.||\\n||OrderParameter || Options for \
InvarLagrangian.||\\n||PerturbationOfMetric || PerturbationOfMetric`[metric]` \
gives the perturbation tensor of the \
metric.||\\n||PerturbationParameterOfMetric || \
PerturbationParameterOfMetric`[metric]` gives the perturbation expansion \
parametric of the metric.||\\n||PerturbBackground || \
PerturbBackground`[expr,n]` does an (unexpanded) perturbation around an \
arbitrary background for only the order n. This is useful if you want to keep \
symbolic things like Perturbation`[EinsteinCD`[]`]` unexpanded. The \
background is set with the option BackgroundSolution.||\\n||PerturbFlat || \
PerturbFlat`[expr,n]` does an (unexpanded) perturbation around a flat \
background for only the order n. This is useful if you want to keep symbolic \
things like Perturbation`[EinsteinCD`[]`]` unexpanded.||\\n||PreferBoxOfRule \
|| PreferBoxOfRule`[tensor,CD]` gives rules for rewriting an expression with \
boxes on the given tensor with respect to the given CD.||\\n||PreferDivOfRule \
|| PreferDivOfRule`[tensor,CD]` gives rules for rewriting an expression with \
divergences of the given tensor with respect to the given \
CD.||\\n||ProductInvariants || ProductInvariants`[metric,order]` gives all \
product invariants of the Riemann tensor at that given order (which has the \
standard level specification)||\\n||RemoveConstants || \
RemoveConstants`[expr]` removes all constants from the tensorial expression \
expr.||\\n||RemoveTensors || RemoveTensors`[expr]` removes all tensors from \
expr, and leaves just the constants.||\\n||RicciDivRule || RicciDivRule`[CD]` \
gives rules for rewriting the divergence of the Ricci tensor of the given \
covariant derivative in terms of the Ricci scalar.||\\n||RicciToEinsteinCC || \
RicciToEinsteinCC`[K]``[expr,cd]` converts Ricci tensors into cosmological \
Einstein tensors.||\\n||RicciToSchouten || RicciToSchouten`[expr,cd]` \
converts Ricci tensors to Schouten tensors.||\\n||RicciToSchoutenCC || \
RicciToSchoutenCC`[expr,cd]` converts Ricci tensors to cosmological Schouten \
tensors.||\\n||RiemannDivRule || RiemannDivRule`[CD]` gives rules for \
rewriting the divergence of the Riemann tensor of the given covariant \
derivative in terms of the Ricci tensor.||\\n||RiemannSimplification || \
RiemannSimplification`[metric,level]``[expr]` works similarly to \
RiemannSimplify, except that it also works for generic options for \
ToCanonical etc, and works on more general expressions. Note that it only \
simplifies expression consisting of Riccis and Riemanns, and not of other \
curvature tensors.||\\n||RiemannYoungRule || RiemannYoungRule`[CD,n]` gives \
the projection rule of n'th covariant derivative of the Riemann tensor of the \
covariant derivative CD onto its Young tableau. n has the default levelspec \
form. The default for n is {0}.||\\n||Schouten || Schouten is a reserved word \
in xTras. It is used to generate the name of the Schouten curvature tensor \
associated to a connection acting on a tangent bundle.||\\n||SchoutenCC || \
SchoutenCC is a reserved word in xTras. It is used to generate the name of \
the cosmological Schouten curvature tensor associated to a connection acting \
on a tangent bundle.||\\n||SchoutenCCToRicci || SchoutenCCToRicci`[expr,cd]` \
converts cosmological Schouten tensors to Ricci \
tensors.||\\n||SchoutenToRicci || SchoutenToRicci`[expr,cd]` converts \
Schouten tensors to Ricci tensors.||\\n||SetCurvatureRelations || \
SetCurvatureRelations`[CD]` sets the automatic curvature relations for the \
covariant derivative CD.||\\n||SimplifyMethod || SimplifyMethod is an option \
for TensorCollect.||\\n||SingleInvariants || SingleInvariants`[metric,order]` \
gives the single invariants of the Riemann tensor at that given order (which \
has the standard level specification)||\\n||SolveConstants || \
SolveConstants`[expr, vars]` attempts to solve the tensorial expr for \
constant symbols vars. SolveConstants`[expr]` attempts to solve expr for all \
the constant symbols appearing in expr.||\\n||SortedCovDsQ || \
SortedCovDsQ`[expr]` returns True if the expression has all its covariant \
derivatives sorted, and False otherwise.  SortedCovDsQ`[expr,CD]` only checks \
the covariant derivative CD.||\\n||SymmetricSpaceRules || \
SymmetricSpaceRules`[CD,K]` produces replacement rules for the curvature \
tensors of CD on a symmetric space of constant curvature \
K.||\\n||TensorCollect || TensorCollect`[expr]` acts as \
Collect`[expr,tensorsof`[expr]`]`||\\n||TensorCollector || \
TensorCollector`[expr]` wraps all tensors in expr in a head \
'TensorCollector'.||\\n||TimeString || TimeString`[seconds]` nicely formats \
the amount of seconds as a string.||\\n||ToBackground || ToBackground`[expr]` \
ensures expr is on some background. The background is set with the option \
BackgroundSolution.||\\n||ToConstantSymbolEquations || \
ToConstantSymbolEquations`[eq]` takes the tensorial equation eq and turns it \
into equations for the constant symbols appearing eq.||\\n||ToFlat || \
ToFlat`[expr]` ensures expr is on a flat background, i.e. it sets unperturbed \
curvature tensors to zero, etc.||\\n||UnorderedPairsPermutations || \
UnorderPairsPermutations`[list]` gives all permutations of the elements of \
list that are unorder pairs. list has to have an even number of \
elements.||\\n||VarL || VarL`[ metric`[a,b]` ]``[ L ]` varies \
Sqrt`[-Det`[g]`]` `*` L with respect to metric`[a,b]`,  and then divides with \
Sqrt`[-Det`[g]`]`.||\\n||YoungProject || YoungProject`[expr,tableau]` \
projects a tensorial expression onto tableau, where the entries of the \
tableau have to be the set of free indices of expr. \
YoungProject`[tensor,tableau]` projects the tensor (withouth the `[]` on \
tensor) onto tableau, where the entries of tableau are integers.  The \
difference between projecting and symmetrizing is that the projection has a \
different overall factor, such that repeatedly projecting does not change the \
result.||\\n||YoungSymmetrize || YoungSymmetrize`[expr,tableau]` symmetrizes \
a tensorial expression according to tableau, where the entries of the tableau \
have to be the set of free indices of expr.  \
YoungSymmetrize`[tensor,tableau]` symmetrizes the tensor (withouth the `[]` \
on tensor) according to tableau, where the entries of tableau are integers.||\
\\n||YoungTableauQ || YoungTableauQ`[tableau]` returns True if tableau is a \
proper Young tableau, and False otherwhise. A proper Young tableau is a list \
of lists of integers or symbols, whose intersection is empty. Furthermore the \
length of the lists has to decrease monotonically.||\"\>"], "Output"]
}, Open  ]]
},
WindowSize->{1088, 856},
WindowMargins->{{Automatic, -1}, {Automatic, 12}},
ShowSelection->True,
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (February 23, \
2011)",
StyleDefinitions->"Default.nb"
]

