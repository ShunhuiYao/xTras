Notebook[{
Cell[BoxData[
 RowBox[{"Quiet", "@", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "Print", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"<<", "xAct`xTras`"}]}], "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Union", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"Names", "[", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"#", ",", "\"\<*\>\""}], "]"}], "]"}], "&"}], "/@", 
      RowBox[{"Select", "[", 
       RowBox[{"$Packages", ",", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"StringFreeQ", "[", 
           RowBox[{"#", ",", "\"\<xTras\>\""}], "]"}]}], "&"}]}], "]"}]}], 
     ")"}]}], ",", 
   RowBox[{
    RowBox[{"StringFreeQ", "[", 
     RowBox[{"#", ",", "\"\<$\>\""}], "]"}], "&"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"StringReplace", "[", 
   RowBox[{
    RowBox[{"StringReplace", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"\"\<||\>\"", ",", "#", ",", " ", "\"\< || \>\"", ",", " ", 
          RowBox[{"MessageName", "[", 
           RowBox[{
            RowBox[{"Evaluate", "@", 
             RowBox[{"Symbol", "@", "#"}]}], ",", "\"\<usage\>\""}], "]"}], 
          ",", " ", "\"\<||\>\""}], "]"}], "&"}], "/@", "%"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<[\>\"", "\[Rule]", "\"\<`[\>\""}], ",", 
        RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<]`\>\""}], ",", 
        RowBox[{"\"\<\\n\>\"", "\[Rule]", "\"\< \>\""}], ",", 
        RowBox[{"\"\<\\t\>\"", "\[Rule]", "\"\<\>\""}], ",", 
        RowBox[{"\"\<*\>\"", "\[Rule]", "\"\<`*`\>\""}]}], "}"}]}], "]"}], 
    ",", 
    RowBox[{"\"\<  \>\"", "\[Rule]", "\"\< \>\""}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"StringJoin", "[", 
  RowBox[{"Riffle", "[", 
   RowBox[{"%", ",", "\"\<\\n\>\""}], "]"}], "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"AllContractions\"\>", ",", "\<\"BackgroundSolution\"\>", 
   ",", "\<\"ClearAutomaticRules\"\>", ",", "\<\"ClearCurvatureRelations\"\>",
    ",", "\<\"Coefficients\"\>", ",", "\<\"CollectConstants\"\>", 
   ",", "\<\"CollectMethod\"\>", ",", "\<\"CollectTensors\"\>", 
   ",", "\<\"ComputeBasisValues\"\>", ",", "\<\"ConstantExprQ\"\>", 
   ",", "\<\"ContractedPairs\"\>", ",", "\<\"CurvatureRelationsQ\"\>", 
   ",", "\<\"DefMetricVariation\"\>", ",", "\<\"DerivativeOrder\"\>", 
   ",", "\<\"Description\"\>", ",", "\<\"DivFreeQ\"\>", 
   ",", "\<\"DoTensorCollect\"\>", ",", "\<\"EinsteinCC\"\>", 
   ",", "\<\"EinsteinCCToRicci\"\>", ",", "\<\"EinsteinSpaceRules\"\>", 
   ",", "\<\"EulerDensity\"\>", ",", "\<\"ExpandBackground\"\>", 
   ",", "\<\"ExpandFlat\"\>", ",", "\<\"ExpandPerturbationDer\"\>", 
   ",", "\<\"ExtraRules\"\>", ",", "\<\"FlatRules\"\>", ",", "\<\"FS\"\>", 
   ",", "\<\"FullSimplification\"\>", ",", "\<\"ImplodedTensorValues\"\>", 
   ",", "\<\"IncludeDuals\"\>", ",", "\<\"IndexConfigurations\"\>", 
   ",", "\<\"InvarLagrangian\"\>", ",", "\<\"InvarWrapper\"\>", 
   ",", "\<\"KillingVectorOf\"\>", ",", "\<\"KillingVectorQ\"\>", 
   ",", "\<\"LevelSpecQ\"\>", ",", "\<\"MakeEquationRule\"\>", 
   ",", "\<\"MapTensors\"\>", ",", "\<\"MapTimed\"\>", 
   ",", "\<\"MapTimedIfPlus\"\>", ",", "\<\"MapTimedTensors\"\>", 
   ",", "\<\"MetricPermutations\"\>", ",", "\<\"MonitorSteps\"\>", 
   ",", "\<\"OrderCoefficient\"\>", ",", "\<\"OrderParameter\"\>", 
   ",", "\<\"PerturbationOfMetric\"\>", 
   ",", "\<\"PerturbationParameterOfMetric\"\>", 
   ",", "\<\"PerturbBackground\"\>", ",", "\<\"PerturbFlat\"\>", 
   ",", "\<\"PreferBoxOf\"\>", ",", "\<\"PreferBoxOfRule\"\>", 
   ",", "\<\"PreferDivOf\"\>", ",", "\<\"PreferDivOfRule\"\>", 
   ",", "\<\"ProductInvariants\"\>", ",", "\<\"RemoveConstants\"\>", 
   ",", "\<\"RemoveTensors\"\>", ",", "\<\"RemoveTensorWrapper\"\>", 
   ",", "\<\"RicciDivRule\"\>", ",", "\<\"RicciToEinsteinCC\"\>", 
   ",", "\<\"RicciToSchouten\"\>", ",", "\<\"RicciToSchoutenCC\"\>", 
   ",", "\<\"RiemannDivRule\"\>", ",", "\<\"RiemannSimplification\"\>", 
   ",", "\<\"RiemannYoungRule\"\>", ",", "\<\"Schouten\"\>", 
   ",", "\<\"SchoutenCC\"\>", ",", "\<\"SchoutenCCToRicci\"\>", 
   ",", "\<\"SchoutenToRicci\"\>", ",", "\<\"SetCurvatureRelations\"\>", 
   ",", "\<\"SimplifyMethod\"\>", ",", "\<\"SingleInvariants\"\>", 
   ",", "\<\"SolveConstants\"\>", ",", "\<\"SolveTensors\"\>", 
   ",", "\<\"SortedCovDsQ\"\>", ",", "\<\"SortMethod\"\>", 
   ",", "\<\"SymmetricSpaceRules\"\>", ",", "\<\"SymmetrizeMethod\"\>", 
   ",", "\<\"TensorCollect\"\>", ",", "\<\"TensorCollector\"\>", 
   ",", "\<\"TensorWrapper\"\>", ",", "\<\"TimeString\"\>", 
   ",", "\<\"ToBackground\"\>", ",", "\<\"ToConstantSymbolEquations\"\>", 
   ",", "\<\"ToFlat\"\>", ",", "\<\"UncontractedPairs\"\>", 
   ",", "\<\"UnitConstant\"\>", ",", "\<\"UnorderedPairsPermutations\"\>", 
   ",", "\<\"VarL\"\>", ",", "\<\"YoungProject\"\>", 
   ",", "\<\"YoungSymmetrize\"\>", ",", "\<\"YoungTableauQ\"\>"}], 
  "}"}]], "Output"],

Cell[BoxData["\<\"||AllContractions || AllContractions`[expr]` returns a \
sorted list of all possible full contractions of expr over its free indices. \
expr cannot have dummy indices. The free indices have to belong to the same \
tangent bundle, which also has to have a symmetric metric.  \
AllContractions`[expr, indexList]` gives all possible contractions of expr \
that have free indices specified by indexList. This is equivalent to adding \
an auxiliary tensor with indices 'indexList' to expr, computing all \
contractions, and varying w.r.t. the auxiliary tensor afterwards.  \
AllContractions`[expr, indexList, symm]` gives all possible contractions of \
expr with free indices indexList and the symmetry symm imposed on the free \
indices.  See also the options SymmetrizeMethod, ContractedPairs, and \
UncontracedPairs.||\\n||BackgroundSolution || BackgroundSolution is an option \
for ToBackground. It should be (a list of) replacement \
rule(s).||\\n||ClearAutomaticRules || ClearAutomaticRules`[symbol,rules]` \
tries to remove rules from the upvalues and downvalues of \
symbol.||\\n||ClearCurvatureRelations || ClearCurvatureRelations`[CD]` \
removes the automatic curvature relations for the covariant derivative \
CD.||\\n||Coefficients || Option for InvarInvariants.||\\n||CollectConstants \
|| CollectConstants`[expr]` act as Collect`[expr, constantsof`[expr]` \
]`.||\\n||CollectMethod || CollectMethod is an option for CollectTensors that \
specifies which (pure) function is used before tensors are collected. The \
Default is ToCanonical@ContractMetric@NoScalar@#& .||\\n||CollectTensors || \
CollectTensors`[expr]` acts as \
Collect`[expr,tensorsof`[expr]`]`||\\n||ComputeBasisValues || \
ComputeBasisValues`[chart1,chart2]` computes and stores the values of the \
basis elements relating chart1 to chart2 and vice versa. Thus it computes \
Basis`[-chart1,chart2]` and Basis`[-chart2,chart1]`.  Note that \
ComputeBasisValues internally uses InChart, so it is preferable to define the \
transformations of the coordinates from chart1 to chart2 and vice versa with \
InChart before using ComputeBasisValues.||\\n||ConstantExprQ || \
ConstantExprQ`[expr]` returns True if expr only contains contains constants \
(i.e. constant symbols and integers, fractions, etc), and False \
otherwise.||\\n||ContractedPairs || ContractedPairs is an option for \
AllContractions which specifies how many index pairs should be contracted. \
The default is All, which amounts to contracting all indices. It can also be \
an integer in the range from 0 to half the number total indices. When \
UncontractedPairs and ContractedPairs have conflicting values, \
UncontractedPairs takes precendence. Note that when not all index pairs are \
contracted, AllContractions returns a list with one element for each unique \
contraction, not taking the ordering of the free indices into \
account.||\\n||CurvatureRelationsQ || CurvatureRelationsQ`[CD]` returns True \
if all of the curvature relations for the covariant derivative CD have been \
set as automatic rules, and False otherwise.||\\n||DefMetricVariation || \
DefMetricVariation`[metric, pert, param]` defines proper VarD and VarL \
functions for the metric. It is called automatically from \
DefMetricPerturbation.||\\n||DerivativeOrder || DerivativeOrder`[expr,CD]` \
gives the order of derivatives of expr.||\\n||Description || Option for \
MapTimed.||\\n||DivFreeQ || DivFreeQ`[expr,tensor,CD]` returns True if expr \
does not contain a divergence of the given tensor w.r.t. the given CD after \
arbritrary commutations of the covariant derivatives.||\\n||DoTensorCollect \
|| Deprecated. Superseded by MapTensors / MapTimedTensors.   \
DoTensorCollect`[func]``[expr]` maps func on every collected tensor in expr. \
This is useful if you have an expression with one tensor object with lots of \
different constants.||\\n||EinsteinCC || EinsteinCC is a reserved word in \
xTras. It is used to generate the name of the cosmological Einstein curvature \
tensor associated to a connection acting on a tangent \
bundle.||\\n||EinsteinCCToRicci || EinsteinCCToRicci`[expr,cd]` converts \
cosmological Einstein tensors to Ricci tensors.||\\n||EinsteinSpaceRules || \
EinsteinSpaceRules`[CD,K]` produces replacement rules for the curvature \
tensors of CD (except the Riemann and Weyl) on an Einstein space of curvature \
K.||\\n||EulerDensity || EulerDensity`[CD]` give the Euler density of the \
curvature tensor of the covariant derivative CD. If the manifold has generic \
dimension, you can use EulerDensity`[CD,dim]` to specify a \
dimension.||\\n||ExpandBackground || ExpandBackground`[expr,n]` expands only \
the nth order perbutation of expr on an arbitrary background, without an \
expansion parameter or 1/n! factor. The background is set with the option \
BackgroundSolution.||\\n||ExpandFlat || ExpandFlat`[expr,n]` expands only the \
nth order perbutation of expr on a flat background, without an expansion \
parameter or 1/n! factor.||\\n||ExpandPerturbationDer || \
ExpandPerturbationDer expands the perturbations of derivatives. It's similar \
to the private xAct function ExpandPerturbationDer, but not \
quite.||\\n||ExtraRules || ExtraRules is an option for \
ApplyBackground.||\\n||FlatRules || FlatRules`[expr]` produces produces \
replacement rules for the curvature tensors of CD on a symmetric space of \
zero curvature. Additionally, partial derivatives of metric are also \
zero.||\\n||FS || FullSimplification`[metric]``[expr]` tries to simplify expr \
as much as possible, taking Bianchi identities into account and sorting \
covariant derivatives. It also uses to power of the Invar package to simplify \
scalar invariants of Riccis and Riemanns (but not of other curvature tensors \
like the Weyl tensor).||\\n||FullSimplification || \
FullSimplification`[metric]``[expr]` tries to simplify expr as much as \
possible, taking Bianchi identities into account and sorting covariant \
derivatives. It also uses to power of the Invar package to simplify scalar \
invariants of Riccis and Riemanns (but not of other curvature tensors like \
the Weyl tensor).||\\n||ImplodedTensorValues || ImplodedTensorValues`[CD, T, \
basis]` computes the values of the covariant derivative CD of the tensor T in \
the given basis, and stores the values in the imploded tensor CDT. Both CD \
and T do not take indices.||\\n||IncludeDuals || Option for SingleInvariants, \
ProductInvariants, RangeInvariants, and InvarLagrangian whether to include \
dual invariants or not.||\\n||IndexConfigurations || \
IndexConfigurations`[expr]` gives a list of all independent index \
configurations of expr.||\\n||InvarLagrangian || InvarLagrangian`[metric, \
maxorder]` gives the most general Lagrangian up to maxorder in derivatives of \
the metric, consisting solely of curvature tensors.||\\n||InvarWrapper || \
InvarWrapper`[invarFunction,g]``[expr,otherargs]` wraps an Invar function \
specified by invarFunction s.t. you can use your own options for ToCanonical, \
ContractMetric, and CurvatureRelations.||\\n||KillingVectorOf || Option for \
DefTensor. If the tensor is to be a Killing vector, the option should be a \
metric. (i.e. KillingVectorOf -> metric)||\\n||KillingVectorQ || \
KillingVectorQ`[tensor]` return True if the tensor is defined to be a Killing \
vector||\\n||LevelSpecQ || LevelSpecQ`[levelspec]` yields True if levelspec \
is a standard levelspec, and false otherwise.||\\n||MakeEquationRule || \
Deprecated. MakeEquationRule`[{equation,pattern,cond}]` returns rules for \
tensors matching pattern in the given equation. Note that is extremely \
similar to IndexSolve. MakeEquationRule is deprecated; it has been superseded \
by SolveTensors.||\\n||MapTensors || MapTensors`[f,expr]` maps f over all \
tensorial expressions in expr.||\\n||MapTimed || MapTimed`[f,expr]` is \
similar to Map, except that it also prints the expected calculation \
time.||\\n||MapTimedIfPlus || MapTimedIfPlus`[f, expr]` maps f on the \
elements of expr while displaying a timer if expr has head Plus, or returns \
f`[expr]` otherwise.||\\n||MapTimedTensors || MapTimedTensors`[f,expr]` maps \
f over all tensorial expressions in expr with \
MapTimed.||\\n||MetricPermutations || MetricPermutations`[metric,indices]` \
gives a list of all possible permutations of indices distributed over n/2 \
metrics (n being the number of indices). Thus \
MetricPermutations`[g]``[{a,b,c,d}]` gives {g`[a,b]`g`[c,d]`, \
g`[a,c]`g`[b,d]`, g`[a,d]`g`[b,c]`}.  Naively this gives n! combinations, but \
because the metric is symmetric and the ordering of the product is \
irrelevant, the number of permutations reduces to (n-1)!!, which is roughly \
the square root of n!. MetricPermutations takes this simplification into \
account.||\\n||MonitorSteps || Option for MapTimed.||\\n||OrderCoefficient || \
OrderCoefficient`[order,n]` gives a constant symbol for \
InvarLagrangian.||\\n||OrderParameter || Options for \
InvarLagrangian.||\\n||PerturbationOfMetric || PerturbationOfMetric`[metric]` \
gives the perturbation tensor of the \
metric.||\\n||PerturbationParameterOfMetric || \
PerturbationParameterOfMetric`[metric]` gives the perturbation expansion \
parametric of the metric.||\\n||PerturbBackground || \
PerturbBackground`[expr,n]` does an (unexpanded) perturbation around an \
arbitrary background for only the order n. This is useful if you want to keep \
symbolic things like Perturbation`[EinsteinCD`[]`]` unexpanded. The \
background is set with the option BackgroundSolution.||\\n||PerturbFlat || \
PerturbFlat`[expr,n]` does an (unexpanded) perturbation around a flat \
background for only the order n. This is useful if you want to keep symbolic \
things like Perturbation`[EinsteinCD`[]`]` unexpanded.||\\n||PreferBoxOf || \
PreferBoxOf`[tensor,CD]``[expr]` commutes the covariant derivatives CD in \
expr such that all possible boxes (CD`[-a]`@CD`[a]`) act on the specified \
tensor.||\\n||PreferBoxOfRule || PreferBoxOfRule`[tensor,CD]` gives rules for \
rewriting an expression with boxes on the given tensor with respect to the \
given CD.||\\n||PreferDivOf || PreferDivOf`[tensor,CD]``[expr]` commutes the \
covariant derivatives CD in expr such that any covariant derivatve contracted \
with tensor acts directy on tensor.||\\n||PreferDivOfRule || \
PreferDivOfRule`[tensor,CD]` gives rules for rewriting an expression with \
divergences of the given tensor with respect to the given \
CD.||\\n||ProductInvariants || ProductInvariants`[metric,order]` gives all \
product invariants of the Riemann tensor at that given order (which has the \
standard level specification)||\\n||RemoveConstants || \
RemoveConstants`[expr]` removes all constants from the tensorial expression \
expr.||\\n||RemoveTensors || RemoveTensors`[expr]` removes all tensors from \
expr, and leaves just the constants.||\\n||RemoveTensorWrapper || \
RemoveTensorWrapper`[expr]` removes TensorWrappers from expr. \
RemoveTensorWrapper is also an option for CollectTensors. If True, \
CollectTensors removes the TensorWrapper heads from the expression before \
returning. The default is True.||\\n||RicciDivRule || RicciDivRule`[CD]` \
gives rules for rewriting the divergence of the Ricci tensor of the given \
covariant derivative in terms of the Ricci scalar.||\\n||RicciToEinsteinCC || \
RicciToEinsteinCC`[K]``[expr,cd]` converts Ricci tensors into cosmological \
Einstein tensors.||\\n||RicciToSchouten || RicciToSchouten`[expr,cd]` \
converts Ricci tensors to Schouten tensors.||\\n||RicciToSchoutenCC || \
RicciToSchoutenCC`[expr,cd]` converts Ricci tensors to cosmological Schouten \
tensors.||\\n||RiemannDivRule || RiemannDivRule`[CD]` gives rules for \
rewriting the divergence of the Riemann tensor of the given covariant \
derivative in terms of the Ricci tensor.||\\n||RiemannSimplification || \
RiemannSimplification`[metric,level]``[expr]` works similarly to \
RiemannSimplify, except that it also works for generic options for \
ToCanonical etc, and works on more general expressions. Note that it only \
simplifies expression consisting of Riccis and Riemanns, and not of other \
curvature tensors.||\\n||RiemannYoungRule || RiemannYoungRule`[CD,n]` gives \
the projection rule of n'th covariant derivative of the Riemann tensor of the \
covariant derivative CD onto its Young tableau. n has the default levelspec \
form. The default for n is {0}.||\\n||Schouten || Schouten is a reserved word \
in xTras. It is used to generate the name of the Schouten curvature tensor \
associated to a connection acting on a tangent bundle.||\\n||SchoutenCC || \
SchoutenCC is a reserved word in xTras. It is used to generate the name of \
the cosmological Schouten curvature tensor associated to a connection acting \
on a tangent bundle.||\\n||SchoutenCCToRicci || SchoutenCCToRicci`[expr,cd]` \
converts cosmological Schouten tensors to Ricci \
tensors.||\\n||SchoutenToRicci || SchoutenToRicci`[expr,cd]` converts \
Schouten tensors to Ricci tensors.||\\n||SetCurvatureRelations || \
SetCurvatureRelations`[CD]` sets the automatic curvature relations for the \
covariant derivative CD.||\\n||SimplifyMethod || SimplifyMethod is an option \
for CollectTensors that specifies how collected prefactors are simplified. \
The Default is Simplify||\\n||SingleInvariants || \
SingleInvariants`[metric,order]` gives the single invariants of the Riemann \
tensor at that given order (which has the standard level \
specification)||\\n||SolveConstants || SolveConstants`[expr, vars]` attempts \
to solve the tensorial expr for constant symbols vars. SolveConstants`[expr]` \
attempts to solve expr for all the constant symbols appearing in expr. \
SolveConstants`[expr, !vars]` attempts to solve expr for all the constant \
symbols appearing in expr, except vars.||\\n||SolveTensors || \
SolveTensors`[equation, {t1,t2,...}]` solves equation for tensors t1, t2, ... \
 SolveTensors`[equation]` attempts to solve equation for any tensors in it.||\
\\n||SortedCovDsQ || SortedCovDsQ`[expr]` returns True if the expression has \
all its covariant derivatives sorted, and False otherwise.  \
SortedCovDsQ`[expr,CD]` only checks the covariant derivative \
CD.||\\n||SortMethod || SortMethod is an option for \
SolveTensors.||\\n||SymmetricSpaceRules || SymmetricSpaceRules`[CD,K]` \
produces replacement rules for the curvature tensors of CD on a symmetric \
space of constant curvature K.||\\n||SymmetrizeMethod || SymmetrizeMethod is \
an option for AllContractions. Its values can be 'ImposeSymmetry' (default) \
or 'ImposeSym'. The former uses xTensor's explicit symmetrization to \
symmetrize the free indices, whereas the latter uses SymManipulator's \
implicit ImposeSym to symmetrize the free indices.||\\n||TensorCollect || \
CollectTensors`[expr]` acts as \
Collect`[expr,tensorsof`[expr]`]`||\\n||TensorCollector || \
TensorWrapper`[expr]` wraps all tensors in expr in a head \
'TensorWrapper'.||\\n||TensorWrapper || TensorWrapper`[expr]` wraps all \
tensors in expr in a head 'TensorWrapper'.||\\n||TimeString || \
TimeString`[seconds]` nicely formats the amount of seconds as a \
string.||\\n||ToBackground || ToBackground`[expr]` ensures expr is on some \
background. The background is set with the option \
BackgroundSolution.||\\n||ToConstantSymbolEquations || \
ToConstantSymbolEquations`[eq]` takes the tensorial equation eq and turns it \
into equations for the constant symbols appearing eq.||\\n||ToFlat || \
ToFlat`[expr]` ensures expr is on a flat background, i.e. it sets unperturbed \
curvature tensors to zero, etc.||\\n||UncontractedPairs || UncontractedPairs \
is an option for AllContractions which specifies how many index pairs should \
not be contracted. The default is None, which amounts to contracting all \
indices. It can also be an integer in the range from 0 to half the number \
total indices. When UncontractedPairs and ContractedPairs have conflicting \
values, UncontractedPairs takes precendence. Note that when not all index \
pairs are contracted, AllContractions returns a list with one element for \
each unique contraction, not taking the ordering of the free indices into \
account.||\\n||UnitConstant || UnitConstant is a constant whose value is one. \
It prints as 1, and is used with \
TensorWrapper.||\\n||UnorderedPairsPermutations || \
UnorderPairsPermutations`[list]` gives all permutations of the elements of \
list that are unorder pairs. list has to have an even number of \
elements.||\\n||VarL || VarL`[ metric`[a,b]` ]``[ L ]` varies \
Sqrt`[-Det`[g]`]` `*` L with respect to metric`[a,b]`,  and then divides with \
Sqrt`[-Det`[g]`]`.||\\n||YoungProject || YoungProject`[expr,tableau]` \
projects a tensorial expression onto tableau, where the entries of the \
tableau have to be the set of free indices of expr. \
YoungProject`[tensor,tableau]` projects the tensor (withouth the `[]` on \
tensor) onto tableau, where the entries of tableau are integers.  The \
difference between projecting and symmetrizing is that the projection has a \
different overall factor, such that repeatedly projecting does not change the \
result.||\\n||YoungSymmetrize || YoungSymmetrize`[expr,tableau]` symmetrizes \
a tensorial expression according to tableau, where the entries of the tableau \
have to be the set of free indices of expr.  \
YoungSymmetrize`[tensor,tableau]` symmetrizes the tensor (withouth the `[]` \
on tensor) according to tableau, where the entries of tableau are integers.||\
\\n||YoungTableauQ || YoungTableauQ`[tableau]` returns True if tableau is a \
proper Young tableau, and False otherwhise. A proper Young tableau is a list \
of lists of integers or symbols, whose intersection is empty. Furthermore the \
length of the lists has to decrease monotonically.||\"\>"], "Output"]
}, Open  ]]
},
WindowSize->{1088, 856},
WindowMargins->{{85, Automatic}, {Automatic, 4}},
ShowSelection->True,
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (October 5, \
2011)",
StyleDefinitions->"Default.nb"
]

